###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.6.53336/W32 for ARM     25/Jun/2014  14:55:06 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\zWk.Src\Mango-M32-MPU-9150\m32_Sensor_mpu9150_9Axis\L #
#                    ibraries\STM32_USB-FS-Device_Driver\src\usb_int.c        #
#    Command line =  D:\zWk.Src\Mango-M32-MPU-9150\m32_Sensor_mpu9150_9Axis\L #
#                    ibraries\STM32_USB-FS-Device_Driver\src\usb_int.c -D     #
#                    USE_STDPERIPH_DRIVER -lcN D:\zWk.Src\Mango-M32-MPU-9150\ #
#                    m32_Sensor_mpu9150_9Axis\project\Debug\List\ -lb         #
#                    D:\zWk.Src\Mango-M32-MPU-9150\m32_Sensor_mpu9150_9Axis\p #
#                    roject\Debug\List\ --diag_suppress Pe549,Pa082 -o        #
#                    D:\zWk.Src\Mango-M32-MPU-9150\m32_Sensor_mpu9150_9Axis\p #
#                    roject\Debug\Obj\ --no_cse --no_unroll --no_inline       #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.0_0\arm\INC\c\DLib_Config_F #
#                    ull.h" -I D:\zWk.Src\Mango-M32-MPU-9150\m32_Sensor_mpu91 #
#                    50_9Axis\project\..\inc\ -I                              #
#                    D:\zWk.Src\Mango-M32-MPU-9150\m32_Sensor_mpu9150_9Axis\p #
#                    roject\..\Sensor9Axis\ -I D:\zWk.Src\Mango-M32-MPU-9150\ #
#                    m32_Sensor_mpu9150_9Axis\project\..\PCA9555_GPIO_Ext\    #
#                    -I D:\zWk.Src\Mango-M32-MPU-9150\m32_Sensor_mpu9150_9Axi #
#                    s\project\..\OLED\ -I D:\zWk.Src\Mango-M32-MPU-9150\m32_ #
#                    Sensor_mpu9150_9Axis\project\..\SRAM\ -I                 #
#                    D:\zWk.Src\Mango-M32-MPU-9150\m32_Sensor_mpu9150_9Axis\p #
#                    roject\..\Libraries\STM32_USB-FS-Device_Driver\inc\ -I   #
#                    D:\zWk.Src\Mango-M32-MPU-9150\m32_Sensor_mpu9150_9Axis\p #
#                    roject\..\Libraries\STM32F10x_StdPeriph_Driver\inc\ -I   #
#                    D:\zWk.Src\Mango-M32-MPU-9150\m32_Sensor_mpu9150_9Axis\p #
#                    roject\..\Libraries\CMSIS\Device\ST\STM32F10x\Include\   #
#                    -On -I "C:\Program Files (x86)\IAR Systems\Embedded      #
#                    Workbench 6.0_0\arm\CMSIS\Include\"                      #
#    List file    =  D:\zWk.Src\Mango-M32-MPU-9150\m32_Sensor_mpu9150_9Axis\p #
#                    roject\Debug\List\usb_int.lst                            #
#    Object file  =  D:\zWk.Src\Mango-M32-MPU-9150\m32_Sensor_mpu9150_9Axis\p #
#                    roject\Debug\Obj\usb_int.o                               #
#                                                                             #
#                                                                             #
###############################################################################

D:\zWk.Src\Mango-M32-MPU-9150\m32_Sensor_mpu9150_9Axis\Libraries\STM32_USB-FS-Device_Driver\src\usb_int.c
      1          /**
      2            ******************************************************************************
      3            * @file    usb_int.c
      4            * @author  MCD Application Team
      5            * @version V3.4.0
      6            * @date    29-June-2012
      7            * @brief   Endpoint CTR (Low and High) interrupt's service routines
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     12            *
     13            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     14            * You may not use this file except in compliance with the License.
     15            * You may obtain a copy of the License at:
     16            *
     17            *        http://www.st.com/software_license_agreement_liberty_v2
     18            *
     19            * Unless required by applicable law or agreed to in writing, software 
     20            * distributed under the License is distributed on an "AS IS" BASIS, 
     21            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     22            * See the License for the specific language governing permissions and
     23            * limitations under the License.
     24            *
     25            ******************************************************************************
     26            */
     27          
     28          #ifndef STM32F10X_CL
     29          
     30          /* Includes ------------------------------------------------------------------*/
     31          #include "usb_lib.h"
     32          
     33          /* Private typedef -----------------------------------------------------------*/
     34          /* Private define ------------------------------------------------------------*/
     35          /* Private macro -------------------------------------------------------------*/
     36          /* Private variables ---------------------------------------------------------*/
     37          __IO uint16_t SaveRState;
     38          __IO uint16_t SaveTState;
     39          
     40          /* Extern variables ----------------------------------------------------------*/
     41          extern void (*pEpInt_IN[7])(void);    /*  Handles IN  interrupts   */
     42          extern void (*pEpInt_OUT[7])(void);   /*  Handles OUT interrupts   */
     43          
     44          /* Private function prototypes -----------------------------------------------*/
     45          /* Private functions ---------------------------------------------------------*/
     46          
     47          /*******************************************************************************
     48          * Function Name  : CTR_LP.
     49          * Description    : Low priority Endpoint Correct Transfer interrupt's service
     50          *                  routine.
     51          * Input          : None.
     52          * Output         : None.
     53          * Return         : None.
     54          *******************************************************************************/
     55          void CTR_LP(void)
     56          {
     57            __IO uint16_t wEPVal = 0;
     58            /* stay in loop while pending interrupts */
     59            while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
     60            {
     61              /* extract highest priority endpoint number */
     62              EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
     63              if (EPindex == 0)
     64              {
     65                /* Decode and service control endpoint interrupt */
     66                /* calling related service routine */
     67                /* (Setup0_Process, In0_Process, Out0_Process) */
     68          
     69                /* save RX & TX status */
     70                /* and set both to NAK */
     71          
     72          
     73          	    SaveRState = _GetENDPOINT(ENDP0);
     74          	    SaveTState = SaveRState & EPTX_STAT;
     75          	    SaveRState &=  EPRX_STAT;	
     76          
     77          	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
     78          
     79                /* DIR bit = origin of the interrupt */
     80          
     81                if ((wIstr & ISTR_DIR) == 0)
     82                {
     83                  /* DIR = 0 */
     84          
     85                  /* DIR = 0      => IN  int */
     86                  /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
     87          
     88          
     89                  _ClearEP_CTR_TX(ENDP0);
     90                  In0_Process();
     91          
     92                     /* before terminate set Tx & Rx status */
     93          
     94                      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
     95          		  return;
     96                }
     97                else
     98                {
     99                  /* DIR = 1 */
    100          
    101                  /* DIR = 1 & CTR_RX       => SETUP or OUT int */
    102                  /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
    103          
    104                  wEPVal = _GetENDPOINT(ENDP0);
    105                  
    106                  if ((wEPVal &EP_SETUP) != 0)
    107                  {
    108                    _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
    109                    Setup0_Process();
    110                    /* before terminate set Tx & Rx status */
    111          
    112          		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
    113                    return;
    114                  }
    115          
    116                  else if ((wEPVal & EP_CTR_RX) != 0)
    117                  {
    118                    _ClearEP_CTR_RX(ENDP0);
    119                    Out0_Process();
    120                    /* before terminate set Tx & Rx status */
    121               
    122          		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
    123                    return;
    124                  }
    125                }
    126              }/* if(EPindex == 0) */
    127              else
    128              {
    129                /* Decode and service non control endpoints interrupt  */
    130          
    131                /* process related endpoint register */
    132                wEPVal = _GetENDPOINT(EPindex);
    133                if ((wEPVal & EP_CTR_RX) != 0)
    134                {
    135                  /* clear int flag */
    136                  _ClearEP_CTR_RX(EPindex);
    137          
    138                  /* call OUT service function */
    139                  (*pEpInt_OUT[EPindex-1])();
    140          
    141                } /* if((wEPVal & EP_CTR_RX) */
    142          
    143                if ((wEPVal & EP_CTR_TX) != 0)
    144                {
    145                  /* clear int flag */
    146                  _ClearEP_CTR_TX(EPindex);
    147          
    148                  /* call IN service function */
    149                  (*pEpInt_IN[EPindex-1])();
    150                } /* if((wEPVal & EP_CTR_TX) != 0) */
    151          
    152              }/* if(EPindex == 0) else */
    153          
    154            }/* while(...) */
    155          }
    156          
    157          /*******************************************************************************
    158          * Function Name  : CTR_HP.
    159          * Description    : High Priority Endpoint Correct Transfer interrupt's service 
    160          *                  routine.
    161          * Input          : None.
    162          * Output         : None.
    163          * Return         : None.
    164          *******************************************************************************/
    165          void CTR_HP(void)
    166          {
    167            uint32_t wEPVal = 0;
    168          
    169            while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
    170            {
    171              _SetISTR((uint16_t)CLR_CTR); /* clear CTR flag */
    172              /* extract highest priority endpoint number */
    173              EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
    174              /* process related endpoint register */
    175              wEPVal = _GetENDPOINT(EPindex);
    176              if ((wEPVal & EP_CTR_RX) != 0)
    177              {
    178                /* clear int flag */
    179                _ClearEP_CTR_RX(EPindex);
    180          
    181                /* call OUT service function */
    182                (*pEpInt_OUT[EPindex-1])();
    183          
    184              } /* if((wEPVal & EP_CTR_RX) */
    185              else if ((wEPVal & EP_CTR_TX) != 0)
    186              {
    187                /* clear int flag */
    188                _ClearEP_CTR_TX(EPindex);
    189          
    190                /* call IN service function */
    191                (*pEpInt_IN[EPindex-1])();
    192          
    193          
    194              } /* if((wEPVal & EP_CTR_TX) != 0) */
    195          
    196            }/* while(...) */
    197          }
    198          
    199          #endif  /* STM32F10X_CL */
    200          
    201          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  CTR_HP
             8 -- Indirect call
        8  CTR_LP
             8 -- Indirect call
             8 -> In0_Process
             8 -> Out0_Process
             8 -> Setup0_Process


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
     152  CTR_HP
     558  CTR_LP
       2  SaveRState
       2  SaveTState

 
   4 bytes in section .bss
 742 bytes in section .text
 
 742 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
